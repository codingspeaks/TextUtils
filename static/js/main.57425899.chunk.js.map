{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","defaultProps","aboutText","TextForm","document","str","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","length","showAlert","newText","toUpperCase","toLowerCase","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","filter","word","Alert","alert","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.57425899.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Link  } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link > */}\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            {/* <Link className=\"nav-link active\" to=\"/\">Home</Link> */}\n                            <a className=\"nav-link active\" href=\"#\">Home</a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                        </li> */}\n                    </ul>\n                    {/* <form className=\"d-flex\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} />\n                        <label className=\"form-check-label\">Enable Dark Mode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };","import { toBeEmpty } from '@testing-library/jest-dom/dist/matchers';\nimport React, {useState} from 'react';\n\n\nexport default function TextForm(props) {\n    document.title = \"TextUtils - Home\";\n    const handleUpClick = ()=>{\n        // console.log(\"Uppercase was clicked: \" +  text);\n        if(text.length == 0){\n            props.showAlert(\"Please enter some text.\", \"danger\");\n        }else{\n            let newText = text.toUpperCase();\n            setText(newText);\n            props.showAlert(\"Converted to Uppercase.\", \"success\");\n        }\n    }\n    const handleLoClick = ()=>{\n        // console.log(\"Uppercase was clicked: \" +  text);\n        if(text.length == 0){\n            props.showAlert(\"Please enter some text.\", \"danger\");\n        }else{\n            let newText = text.toLowerCase();\n            setText(newText);\n            props.showAlert(\"Converted to Lowercase.\", \"success\");\n        }\n    }\n    const handleClearClick = ()=>{\n        if(text.length == 0){\n            props.showAlert(\"Please enter some text.\", \"danger\");\n        }else{\n            let newText = \"\";\n            setText(newText);\n            props.showAlert(\"Text Cleared.\", \"success\");\n        }\n    }\n    const handleCopy = () => {\n        // console.log(\"I am copy\");\n        var text = document.getElementById(\"myBox\");\n        if(text.value == ''){\n            props.showAlert(\"Please enter some text.\", \"danger\");\n        }else{\n            text.select();\n            text.setSelectionRange(0, 9999);\n            navigator.clipboard.writeText(text.value);\n            props.showAlert(\"Text Copied.\", \"success\");\n        }\n    }\n    const handleExtraSpaces = () => {\n        if(text.length == 0){\n            props.showAlert(\"Please enter some text.\", \"danger\");\n        }else{\n            let newText = text.split(/[ ]+/);\n            setText(newText.join(\" \"));\n            props.showAlert(\"Extra spaces removed.\", \"success\");\n        }\n    }\n\n    const handleOnChange = (event)=>{\n        // console.log(\"On change\");\n        setText(event.target.value)\n    }\n\n    function countWords(str) {\n        const arr = str.split(\" \");\n        return arr.filter(word => word !== \"\").length;\n    }\n\n    const [text, setText] = useState(''); \n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='light'?'#042743':'white'}}> \n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\"> \n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'#aba4a4', color: props.mode==='light'?'#042743':'white'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='light'?'#042743':'white'}}>\n            <h2>Your text summary</h2>\n            {/* <p>{//text.length > 0 ? text.trim().split(\" \").length : 0} words and {text.length} characters</p> */}\n            <p>{countWords(text)} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = ()=> {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been Enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n    {/* <Navbar/> */}\n    {/* <Router> */}\n      \n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      \n      <div className=\"container my-3\">\n        <Alert alert={alert} />\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About title=\"TextUtils - About\" mode={mode} />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm title=\"TextUtils - Home\" showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n      </div>\n\n    {/* </Router> */}\n    </> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}